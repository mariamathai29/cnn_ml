# -*- coding: utf-8 -*-
"""data augmentation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NcsiPeTfXhNvx_x-hcJFE-tIBf5eoJAm
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import imutils
import cv2
import os
import random
import matplotlib.pyplot as plt
from IPython.display import Image, display
from skimage.transform import resize
from PIL import Image, ImageEnhance

path = "/content/drive/MyDrive/GEC/GECHACKATHON/dataset/food_ticket_real_2"

def data_augmentation(path):

  #Iterate through each image we have
  for imgName in os.listdir(path):
    if("original" in imgName):
      #Below is basically the image opening process
      img_path = path + "/" + imgName
      img = plt.imread(img_path)
      imgHeight = img.shape[0]
      imgWidth = img.shape[1]

      #This code below is specifically for brightness adjust (uses PIL)
      img_for_shading = Image.open(img_path)

      #Data augmentation loop
      #We augment each photo 10 times per effect
      for i in range(10):

        #--------------------------Horizontal Translation-------------------------#
        hori_translate = random.randint(-int(imgWidth / 10), int(imgWidth / 10))  #Generate random number to translate by
                                                                                  #Divide by 10 to avoid major translations
                                                                                  #(i.e. large portions of the tickets go missing)
        #print(f"Translated horizontally by {hori_translate} pixels.")
        translated = imutils.translate(img, hori_translate, 0)                    #Do the translation

        #Name and save the translated image into the augmented folder
        cv2.imwrite(path + "/" + imgName.split("_")[1].split(".")[0] +
                    "_horiTranslate_" + str(i) + ".jpg", cv2.cvtColor(translated, cv2.COLOR_RGB2BGR))

        #imgplot = plt.imshow(translated)
        #plt.show()

        #--------------------------Vertical Translation-------------------------#
        verti_translate = random.randint(-int(imgHeight / 10), int(imgHeight / 10)) #Generate random number to translate by
                                                                                    #Divide by 10 to avoid major translations
                                                                                    #(i.e. large portions of the tickets go missing)
        #print(f"Translated vertically by {verti_translate} pixels.")
        translated = imutils.translate(img, 0, verti_translate)                    #Do the translation

        #Name and save the translated image into the augmented folder
        cv2.imwrite(path + "/" + imgName.split("_")[1].split(".")[0] +
                    "_vertiTranslate_" + str(i) + ".jpg", cv2.cvtColor(translated, cv2.COLOR_RGB2BGR))

        #imgplot = plt.imshow(translated)
        #plt.show()

        #--------------------------Rotation---------------------------------------#

        #Randomly rotate the image
        rotation = random.randint(0, 360)   #Generate a random rotation angle
        #print(f"Rotated by {rotation} degrees.")
        rotated = imutils.rotate(img, angle = rotation)

        #Save the rotated image into the augmented folder
        cv2.imwrite(path + "/" + imgName.split("_")[1].split(".")[0] + "_rotate_" + str(i) + ".jpg", cv2.cvtColor(rotated, cv2.COLOR_RGB2BGR))

        #imgplot = plt.imshow(rotated)
        #plt.show()

        #--------------------------Brightness Adjust------------------------------#

        #Randomly discolour the image
        brightness = random.uniform(0.5,1.5) #Generate a random shade

        #image brightness enhancer
        enhancer = ImageEnhance.Brightness(img_for_shading)
        im_output = enhancer.enhance(brightness)

        #Save the rotated image into the augmented folder
        #cv2.imwrite(path + "/" + imgName.split("_")[1].split(".")[0] + "_shaded_" + str(i) + ".jpg", cv2.cvtColor(im_output, cv2.COLOR_RGB2BGR))
        im_output.save(path + "/" + imgName.split("_")[1].split(".")[0] + "_shaded_" + str(i) + ".jpg")

        #imgplot = plt.imshow(im_output)
        #plt.show()

    #print(img_resized.shape)
    #imgplot = plt.imshow(img_resized)
    #plt.show()
    # display(Image(img))





data_augmentation("/content/drive/MyDrive/GEC/GECHACKATHON/dataset/food_ticket_real_2")